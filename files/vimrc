let mapleader = " "
" Changes the color scheme to a pleasent scheme
colorscheme molokai
if !empty(glob("~/.vim/autoload/plug.vim"))

	call plug#begin('~/.vim/plugged')

	Plug 'SirVer/ultisnips' " UtilSnips engine
	Plug 'honza/vim-snippets' " Code snippets
	Plug 'mrtazz/DoxygenToolkit.vim' "Doxygen utils
	Plug 'Shougo/neocomplete.vim' | Plug 'Shougo/vimproc.vim', {'do': 'make'}
	Plug 'tmux-plugins/vim-tmux'
"	Plug 'python-rope/ropevim', {'for': 'python'}
	Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
"	Plug 'scrooloose/syntastic'
	Plug 'Konfekt/FastFold'
"	Plug 'eiginn/netrw'
"	Plug 'jeetsukumaran/vim-buffergator'
	Plug 'kien/ctrlp.vim'
"	Plug 'majutsushi/tagbar', {'on': 'TagbarToggle'}
	Plug 'justmao945/vim-clang'

	call plug#end()

	nmap <F8> :TagbarToggle<CR> " Turns TagbarToggllet g:DoxygenToolkit_briefTag_pre="@Synopsis  "

	"Doxygen toolkit configuration
	let g:DoxygenToolkit_paramTag_pre="@Param "
	let g:DoxygenToolkit_returnTag="@Returns   "
	let g:DoxygenToolkit_blockHeader="-------------------------------"
	let g:DoxygenToolkit_blockFooter="---------------------------------"
	let g:DoxygenToolkit_authorName="Christopher Rhodes"

	let g:tagbar_compact = 1

	let g:neocomplete#enable_at_startup = 1

	let g:UltiSnipsExpandTrigger='<F9>'
	let g:UltiSnipsJumpForwardTrigger="<c-b>"
	let g:UltiSnipsJumpBackwardTrigger="<c-z>"

	if exists('g:loaded_syntastic_plugin')

		let g:syntastic_cpp_checkers = ['gcc']

		let g:syntastic_cpp_check_header = 1
		let g:syntastic_cpp_include_dirs = [ 'includes', 'headers', 'src/headers' ]
	endif

	let g:buffergator_vsplit_size = 40
	let g:buffergator_hsplit_size = 20
	let g:buffergator_autoupdate = 1
	let g:buffergator_viewport_split_policy = "n"

" disable auto completion for vim-clang
	if exists('g:clang_loaded')
        let g:clang_auto = 0
		let g:clang_check_syntax_auto = 1
        " default 'longest' can not work with neocomplete
        let g:clang_c_completeopt = 'menuone,preview'
        let g:clang_cpp_completeopt = 'menuone,preview'

        " use neocomplete
        " input patterns
        if !exists('g:neocomplete#force_omni_input_patterns')
          let g:neocomplete#force_omni_input_patterns = {}
        endif

        " for c and c++
        let g:neocomplete#force_omni_input_patterns.c =
              \ '[^.[:digit:] *\t]\%(\.\|->\)\w*'
        let g:neocomplete#force_omni_input_patterns.cpp =
\ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'

	endif

else
	echom "Plugged not installed. Plugins not going to be loaded."
	echom "See https://github.com/junegunn/vim-plug for installation and usage"
	echom "Running install_plugged.sh in workspace-setup repo you got this from will install plugged"
endif
" Mappings
	" Swaps scroll commands for easier ergonimcs
	nnoremap <C-f> :call ScrollDownPercent(33)<CR>
	nnoremap <C-b> :call ScrollUpPercent(33)<CR>
	" Moves down a split window
	nmap <Leader><Space> za
	nmap <Leader><S-Space> zA
	vmap <Leader><Space> zf
	" Moves through split window
	nmap <Leader>j <C-W>j<C-R>
	nmap <Leader>k <C-W>k<C-R>
	nmap <Leader>h <C-W>h<C-R>
	nmap <Leader>l <C-W>l<C-R>
	" Moves through split window and makes it full screen
	nmap <Leader>J <C-W>j<C-W>_ 
	nmap <Leader>K <C-W>k<C-W>_ 
	nmap <Leader>L <C-W>l<C-W>_ 
	nmap <Leader>H <C-W>h<C-W>_ 
	"Remap leader to yank and put from system clipboard
	vmap <Leader>y "+y
	vmap <Leader>d "+d
	nmap <Leader>p "+p
	nmap <Leader>P "+P
	vmap <Leader>p "+p
	vmap <Leader>P "+P
	" Re-creates the ctags for the current file
	nmap <Leader>t :!(cd %:p:h;ctags *.[ch])& 
	" Writes file
	nmap <Leader>w :w<CR> 
	" Next buffer
	nmap <Leader>n :bn <CR> 
	" Previous buffer
	nmap <Leader>p :bp <CR> 
	" Opens netrw sidebar on the current file
	nmap <Leader>` :call VexToggle("")<CR>
	" Quick write session with F2
	noremap <F2> :mksession! ./.vim_session
	" And load session with F11
	noremap <F11> :source ./.vim_session
	" Reload tag file with F3
	noremap <F3> :!(cd %:p:h && ctags -R -f .tags)
	map <F4> :lgrep -e " . expand("<cword>") . " "
	map <F5> !~/dirtags % & <CR>
" Options
	filetype plugin on " Turns plugin filetype detection on
	filetype on " The command filetype plugin on turns filetype detection on, however to ensure it is turned on
	set omnifunc=syntaxcomplete#Complete
	set completeopt=longest,menuone
	
	au BufRead *.rs set filetype=rust
	autocmd CompleteDone * pclose
	autocmd BufNewFile,BufRead *.md set filetype=markdown
	autocmd BufNewFile,BufRead SConstruct set filetype=python
	set nu " Sets line numbers on, change to rnu for relative line numbers
	set tabstop=4 softtabstop=0 noexpandtab shiftwidth=4 " Changes tab to 4 spaces
	set backspace=indent,eol,start " Makes backspace actually work
	set sessionoptions=help,blank,buffers,curdir,folds,tabpages,winsize,slash,unix
	set tags=./.tags,.tags;
	"Folding with syntax highlighting
		set foldmethod=syntax
		set foldnestmax=3
		let javaScript_fold=1         " JavaScript
		let perl_fold=1               " Perl
		let php_folding=1             " PHP
		let r_syntax_folding=1        " R
		let ruby_fold=1               " Ruby
		let sh_fold_enabled=1         " sh
		let vimsyn_folding='af'       " Vim script
		let xml_syntax_folding=1      " XML
	"Fix external grep
	set grepprg=grep\ -rnEI\ --exclude-dir=.git\ $*\ /dev/null
	"Modelines
	set modeline
	set modelines=5

" Functions

	function! GetScrollPercent(percent)
		let movelines=winheight(0)*(50-a:percent)/100
		if has('float') && type(movelines)==type(0.0)
			let movelines=float2nr(movelines)
		endif
		return movelines
	endfunction
	function! ScrollDownPercent(percent)
		let movelines=GetScrollPercent(a:percent)
		execute 'normal! '.movelines.'j'
	endfunction
	function! ScrollUpPercent(percent)
		let movelines=GetScrollPercent(a:percent)
		execute 'normal! '.movelines.'k'
	endfunction
	" " Make Vim recognize XTerm escape sequences for Page and Arrow
	" " keys combined with modifiers such as Shift, Control, and Alt.
	" " See http://www.reddit.com/r/vim/comments/1a29vk/_/c8tze8p
	if &term =~ '^screen'
	   " Page keys http://sourceforge.net/p/tmux/tmux-code/ci/master/tree/FAQ
		execute "set t_kP=\e[5;*~"
		execute "set t_kN=\e[6;*~"

	   " Arrow keys http://unix.stackexchange.com/a/34723
		execute "set <xUp>=\e[1;*A"
		execute "set <xDown>=\e[1;*B"
		execute "set <xRight>=\e[1;*C"
		execute "set <xLeft>=\e[1;*D"
	endif
	"
	if &term =~ '256color'
	  " disable Background Color Erase (BCE) so that color schemes
	  " render properly when inside 256-color tmux and GNU screen.
	  " see also http://snk.tuxfamily.org/log/vim-256color-bce.html
	  set t_ut=
	endif
